@inject IOptionsSnapshot<GoogleAPISettings> _appSettings;
@using C_bool.WebApp.Config
@using Microsoft.Extensions.Options
@using Status = C_bool.BLL.Helpers.Status
@model IEnumerable<C_bool.BLL.Models.GooglePlaces.GooglePlace>

@{
    ViewData["Title"] = "Szukaj nowych miejsc";
    var message = (StatusMessage)ViewBag.Message;
}



@if (Model != null && Model.Any())
{
    <h1 style="margin: 10px;">Znalezione miejsca:</h1>
    <partial name="Partials/NewPlacesCards" model="Model" />
}
else
{
    <div class="alert alert-dismissible alert-warning">
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        <h4 class="alert-heading">Nie bangla!</h4>
        <p class="mb-0">@message.Message<br>Spróbuj ponownie używając opcji <b>Szukaj w pobliżu</b> lub <b>Szukaj po nazwie</b></p>
    </div>
}


@section Scripts {
    @*<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=@_googleApiSettings.Value.GoogleAPIKey"></script>*@
    <script>

        // show map in modal
        function initMap(latitude, longitude) {
            const point = { lat: latitude, lng: longitude };
            const map = new google.maps.Map(document.getElementById("map"),
                {
                    zoom: 16,
                    center: point,
                    mapId: '@Html.Raw(_appSettings.Value.CustomMapId)'
                });
            const marker = new google.maps.Marker({
                position: point,
                map: map,
                icon: "/img/onion.png"
            });
        }

    </script>
}