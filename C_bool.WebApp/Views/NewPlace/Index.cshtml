@inject IOptionsSnapshot<GoogleAPISettings> _appSettings;
@using C_bool.WebApp.Config
@using Microsoft.Extensions.Options
@using Status = C_bool.BLL.Helpers.Status
@model IEnumerable<C_bool.BLL.Models.GooglePlaces.GooglePlace>

@{
    ViewData["Title"] = "Index";
}



@if (Model != null && Model.Any())
{
    <h1 style="margin: 10px;">Znalezione miejsca:</h1>
    <partial name="Partials/NewPlacesCards" model="Model" />
}
else
{
    <div class="alert alert-dismissible alert-warning">
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        <h4 class="alert-heading">Nie bangla!</h4>
        <p class="mb-0">@ViewBag.Message<br>Spróbuj ponownie używając opcji <b>Szukaj w pobliżu</b> lub <b>Szukaj po nazwie</b></p>
    </div>
}

<div class="modal" id="mapModal">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true"></span>
                </button>
            </div>
            <div class="modal-body">
                <div id="map" style="background-color: gainsboro; width: 100%; height: 600px"></div>
            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @*<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=@_googleApiSettings.Value.GoogleAPIKey"></script>*@
    <script>

        // show map in modal
        function initMap(latitude, longitude) {
            const point = { lat: latitude, lng: longitude };
            const map = new google.maps.Map(document.getElementById("map"),
                {
                    zoom: 16,
                    center: point,
                    mapId: 'c67cdd640e77cc91'
                });
            const marker = new google.maps.Marker({
                position: point,
                map: map,
                icon: "/img/onion.png"
            });
        }

        //post data to controller
        function postToController(controller, view, input) {
            var postData = {Id: input};

            $.ajax(
                {
                    type: "POST",
                    url: '/' + controller + '/' + view,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: JSON.stringify(postData),
                    success: function(data) {
                       showNotif('green', 'OK');
                    },

                    error: function (xmlhttprequest, textstatus, errorthrown) {
                            //alert(" conection to the server failed ");
                            showNotif('red', errorthrown);
                    }
                });
        };

        // show notification window
        function showNotif(background, message) {
            const notyf = new Notyf({
                position: {
                    x: 'right',
                    y: 'bottom',
                },
                types: [
                    {
                        type: 'info',
                        background: background,
                        icon: {
                            className: 'fas fa-info-circle',
                            tagName: 'span',
                            color: '#fff'
                        },
                        dismissible: true
                    }
                ],
                duration: 10000,
            });
            notyf.open({
                type: 'info',
                message: message
            });
        };

        window.addEventListener("load", showNotif('@if (ViewBag.QueryStatus.Equals(Status.OK)){@Html.Raw("green")} else {@Html.Raw("red")}', '@ViewBag.Message'));
    </script>
}