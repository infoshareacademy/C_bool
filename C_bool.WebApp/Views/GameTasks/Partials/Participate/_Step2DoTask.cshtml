@using C_bool.BLL.Enums
@using C_bool.BLL.Logic
@using C_bool.WebApp.Models.GameTask
@using C_bool.WebApp.Models.Place
@model C_bool.WebApp.Models.GameTask.GameTaskViewModel
@{
    var places = new List<PlaceViewModel>();
    places.Add(Model.Place);
    ViewData["places"] = places;
}

<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="check-circle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
    </symbol>
    <symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
    </symbol>
    <symbol id="exclamation-triangle-fill" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
    </symbol>
</svg>

<div class="row">
    <div class="col-5">
        <div class="card border-0 shadow mb-4">
            <div class="card-header">
                <h4>Grande Finale!</h4>
                <p>Przed tobą ostatnie kroki, zamelduj się na miejscu i zgarnij punkty!</p>
            </div>
            <div class="card-body">

                @if (Model.IsActive)
                {
                    @if (Model.Type is TaskType.CheckInToALocation or TaskType.Event)
                    {
                        @if (SearchNearbyPlaces.DistanceBetweenPlaces(ViewBag.Latitude, ViewBag.Longitude, Model.Place.Latitude, Model.Place.Longitude) < 100)
                        {
                            <div class="alert alert-success" role="alert">
                                <h4 class="alert-heading"><svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill" /></svg> Jesteś na miejscu!</h4>
                                <p>Jesteś @SearchNearbyPlaces.ReadableDistance(SearchNearbyPlaces.DistanceBetweenPlaces(ViewBag.Latitude, ViewBag.Longitude, Model.Place.Latitude, Model.Place.Longitude)) od celu</p>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-danger" role="alert">
                                <h4 class="alert-heading"><svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill" /></svg> Musisz kawałek podejść...</h4>
                                <p>Jesteś @SearchNearbyPlaces.ReadableDistance(SearchNearbyPlaces.DistanceBetweenPlaces(ViewBag.Latitude, ViewBag.Longitude, Model.Place.Latitude, Model.Place.Longitude)) od celu</p>
                                <hr>
                                <p class="mb-0">Te zadanie musisz wykonać będąc w okolicy <b>100 metrów od @Model.Place.Name</b></p>
                            </div>
                        }
                    }
                    @if (Model.ValidFrom != DateTime.MinValue && Model.ValidThru != DateTime.MinValue)
                    {
                        if (Model.ValidFrom < DateTime.Now && Model.ValidThru >= DateTime.Now)
                        {
                            <div class="alert alert-success" role="alert">
                                <h4 class="alert-heading"><svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill" /></svg> Jesteś o czasie!</h4>
                                <p>Pozostało <b><span class="badge-info" id="countdownTimer2"></span></b> na wykonanie zadania</p>
                                <hr>
                                <p class="mb-0">Data: @Model.ValidFrom.ToString("dddd, d MMM hh:mm") - @Model.ValidThru.ToString("dddd, d MMM hh: mm")</p>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-danger" role="alert">
                                <h4 class="alert-heading"><svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill" /></svg> Spóźniłeś się...</h4>
                                <p>Było minęło, czas na wykonanie zadania upłynął...</p>
                            </div>
                        }
                    }

                    @if (Model.IsDoneLimited && Model.LeftDoneAttempts > 0)
                    {
                        <div class="alert alert-warning" role="alert">
                            <h4 class="alert-heading"><svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill" /></svg> Czekamy na ciebie!</h4>
                            <p>Pozostało <b>@Model.LeftDoneAttempts wolnych miejsc</b>, śpiesz się, aby nikt nie zgarnał ci cebul sprzed nosa!</p>
                        </div>
                    }
                    @if (Model.IsDoneLimited && Model.LeftDoneAttempts == 0)
                    {
                        <div class="alert alert-danger" role="alert">
                            <h4 class="alert-heading"><svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill" /></svg> Ktoś cię uprzedził...</h4>
                            <p>Niestety, zadanie miało limitowaną liczbę użytkowników, wszystkie miejsca zostały zajęte.</p>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-danger" role="alert">
                        <h4 class="alert-heading"><svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill" /></svg> Spóźniłeś się...</h4>
                        <p>Zadanie nie jest już aktywne, ktoś Cię ubiegł lub czas na wykonanie zadania skończył się</p>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-7">
        <form enctype="multipart/form-data" asp-action="Participate" asp-route-gameTaskId="@Model.Id" class="needs-validation" novalidate>

            <partial name="~/Views/Shared/ValidationAlert.cshtml" />

            @if (Model.Type is TaskType.CheckInToALocation or TaskType.Event)
            {
                <partial name="Partials/Participate/TaskTypes/_CheckInToALocation" model="new GameTaskParticipateModel()" view-data="ViewData" />
                @*@await Html.PartialAsync("Partials/Participate/TaskTypes/_CheckInToALocation", new GameTaskParticipateModel())*@
            }
            @if (Model.Type == TaskType.TextEntry)
            {
                @await Html.PartialAsync("Partials/Participate/TaskTypes/_TextEntry", new GameTaskParticipateModel())
            }

            @if (Model.Type == TaskType.TakeAPhoto)
            {
                @await Html.PartialAsync("Partials/Participate/TaskTypes/_TakeAPhoto", new GameTaskParticipateModel())
            }

            <div class="form-group">
                <input type="submit" value="Wykonaj zadanie!" class="btn btn-success btn-lg d-block" style="margin-top: 15px;" />
            </div>

        </form>
    </div>
</div>

<script>

    // Set the date we're counting down to
    var countDownDate = new Date('@Model.ValidThru.ToString("yyyy-MM-ddTHH:mm:ss")');

// Update the count down every 1 second
    var x = setInterval(function() {

        // Get today's date and time
        var now = new Date().getTime();

        // Find the distance between now and the count down date
        var distance = countDownDate - now;

        // Time calculations for days, hours, minutes and seconds
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        document.getElementById("countdownTimer2").innerHTML = days + "d " + hours + "h "
            + minutes + "m " + seconds + "s ";

        if (distance < 0) {
            clearInterval(x);
            document.getElementById("demo").innerHTML = "EXPIRED";
        }
    }, 1000);

</script>
