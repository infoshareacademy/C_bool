@using C_bool.BLL.Logic
@using Castle.Core.Internal
@model C_bool.WebApp.Models.GameTask.GameTaskViewModel

<div class="row">
    <div class="col-5 mb-4">
        <partial name="Partials/_TasksCard"/>

    </div>
    <div class="col-7 mb-4">
        @if (!Model.ShortDescription.IsNullOrEmpty())
        {
            <div class="card border-0 shadow mb-4">
                <div class="card-header">
                    <h4>Opis zadania</h4>
                </div>
                <div class="card-body">

                    <div>
                        <p class="card-text">@Model.ShortDescription</p>
                    </div>
                </div>
            </div>


        }
        <!--Task description - short and full, if exist-->
        @if (!Model.ShortDescription.IsNullOrEmpty())
        {
            <div class="card border-0 shadow mb-4">
                <div class="card-header">
                    <h4>Szczegóły zadania</h4>
                </div>
                <div class="card-body">

                    @if (!Model.Description.IsNullOrEmpty())
                    {
                        <div>
                            @Html.Raw(Model.Description)
                        </div>
                    }
                    else
                    {

                        <div class="alert alert-secondary d-flex align-items-center mb-0" role="alert">
                            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill" /></svg>
                            <div>
                                To zadanie nie posiada rozszerzonego opisu
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

<script>

    // Set the date we're counting down to
    var countDownDate = new Date('@Model.ValidThru.ToString("yyyy-MM-ddTHH:mm:ss")');

// Update the count down every 1 second
    var x = setInterval(function() {

        // Get today's date and time
        var now = new Date().getTime();

        // Find the distance between now and the count down date
        var distance = countDownDate - now;

        // Time calculations for days, hours, minutes and seconds
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        document.getElementById("countdownTimer").innerHTML = days + "d " + hours + "h "
            + minutes + "m " + seconds + "s ";

        document.getElementById("countdownTimer2").innerHTML = days + "d " + hours + "h "
            + minutes + "m " + seconds + "s ";

        if (distance < 0) {
            clearInterval(x);
            document.getElementById("demo").innerHTML = "EXPIRED";
        }
    }, 1000);

</script>
